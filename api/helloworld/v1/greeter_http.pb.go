// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.2
// source: helloworld/v1/greeter.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterLogin = "/helloworld.v1.Greeter/Login"
const OperationGreeterSignup = "/helloworld.v1.Greeter/Signup"

type GreeterHTTPServer interface {
	// Login Sends a greeting
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	Signup(context.Context, *UserSignupRequest) (*UserSignupResponse, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.POST("/user/login", _Greeter_Login0_HTTP_Handler(srv))
	r.POST("/user/signup", _Greeter_Signup0_HTTP_Handler(srv))
}

func _Greeter_Login0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*UserLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserLoginResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_Signup0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserSignupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterSignup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Signup(ctx, req.(*UserSignupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserSignupResponse)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	Login(ctx context.Context, req *UserLoginRequest, opts ...http.CallOption) (rsp *UserLoginResponse, err error)
	Signup(ctx context.Context, req *UserSignupRequest, opts ...http.CallOption) (rsp *UserSignupResponse, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) Login(ctx context.Context, in *UserLoginRequest, opts ...http.CallOption) (*UserLoginResponse, error) {
	var out UserLoginResponse
	pattern := "/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) Signup(ctx context.Context, in *UserSignupRequest, opts ...http.CallOption) (*UserSignupResponse, error) {
	var out UserSignupResponse
	pattern := "/user/signup"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterSignup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
